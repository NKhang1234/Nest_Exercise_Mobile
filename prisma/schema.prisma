// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma Schema based on SQLite schema

// UserProfile model
// Stores user profile information
model UserProfile {
  id       String  @id @default(uuid())
  password String
  name     String  @unique
  avatar   String?

  categories    Category[]
  wallets       Wallet[]
  transactions  Transaction[]
  budgets       Budget[]
  subscriptions Subscription[]

  @@index([name], name: "idx_user_name")
}

// Category model
// Stores different expense/income categories
model Category {
  id            String           @id @default(uuid())
  name          String           
  userId        String
  user          UserProfile      @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  subscriptions Subscription[]
  wallets       Wallet[]         @relation("VisibleCategory")
}

// Wallet model
// Stores information about different money sources/accounts
model Wallet {
  id              String         @id @default(uuid())
  name            String         
  initAmount      Float          @default(0)
  currency        String
  visibleCategory String?
  userId          String
  user            UserProfile    @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        Category?      @relation("VisibleCategory", fields: [visibleCategory], references: [id], onDelete: SetNull, onUpdate: Cascade)
  transactions    Transaction[]
  budgets         Budget[]
}

// Transaction model
// Records individual income or expense transactions
model Transaction {
  id         String   @id @default(uuid())
  type       String
  amount     Float
  currency   String
  date       String
  walletId   String
  categoryId String
  userId     String
  user       UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  repeat     String   @default("None")
  note       String?
  picture    String?
  wallet     Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([walletId], name: "idx_transaction_wallet")
  @@index([categoryId], name: "idx_transaction_category")
  @@index([date], name: "idx_transaction_date")
}

// Budget model
// Defines spending limits for specific categories/wallets over a period
model Budget {
  id       String  @id @default(uuid())
  name     String  
  amount   Float
  currency String
  walletId String
  userId   String
  user     UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  repeat   String  @default("None")
  wallet   Wallet  @relation(fields: [walletId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([walletId], name: "idx_budget_wallet")
}

// Subscription model
// Tracks recurring payments like subscriptions
model Subscription {
  id             String   @id @default(uuid())
  name           String   
  amount         Float
  currency       String
  billingDate    String
  repeat         String
  reminderBefore Int      @default(0)
  categoryId     String
  userId         String
  user           UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([categoryId], name: "idx_subscription_category")
}
